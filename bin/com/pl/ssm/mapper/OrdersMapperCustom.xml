<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- <mapper namespace="com.pl.ssm.mapper.userMapper"> -->
<mapper namespace="com.pl.ssm.mapper.OrdersMapperCustom">
	<!--定义resultMap 将查询结果映射到com.pl.ssm.pojo.Orders中 -->
	<resultMap type="com.pl.ssm.pojo.Orders"
		id="OrdersUserResultMap">
		<!--配置要映射的订单信息 id:指定查询列中的唯一标识，如果有多个列组成唯一标识，则配置多个id -->
		<id column="id" property="id" />
		<result column="user_cid" property="userCid" />
		<result column="number" property="number" />
		<result column="createtime" property="createtime" />
		<result column="note" property="note" />
		<!--配置要映射的关联用户信息 association:用于映射关联查询单个对象的信息 property:要将关联查询的用户信息映射到Orders中哪个属性 -->
		<association property="user"
			javaType="com.pl.ssm.pojo.User">
			<id column="user_cid" property="cid" />
			<result column="name" property="name" />
			<result column="sex" property="sex" />
			<result column="cardDate" property="cardDate" />
		</association>
	</resultMap>

	<!-- 订单及订单明细的resultMap -->
	<resultMap type="com.pl.ssm.pojo.Orders"
		id="OrdersAndOrdersDetailResultMap" extends="OrdersUserResultMap">
		<!-- 订单信息 id,association,collection是有顺序的 -->
		<!--用户信息 -->
		<!--使用继承，不用再次配置订单和用户信息 -->

		<!-- 订单明细信息 一条订单对应多个明细，这里需要collection进行映射 collection:实现查询到的多条信息映射到集合对象中 
			property：将查询到的多条记录映射到哪个属性 ofType:映射到集合属性中pojo的类型 -->
		<collection property="ordersDetails"
			ofType="com.pl.ssm.pojo.OrdersDetail">
			<id column="orderdetail_id" property="id" />
			<result column="items_id" property="itemsId" />
			<result column="items_num" property="itemsNum" />
			<result column="orders_id" property="ordersId" />
		</collection>

	</resultMap>
	<!-- 查询用户及订单信息 -->
	<resultMap type="com.pl.ssm.pojo.User"
		id="UserAndItemsResultMap">
		<!--用户信息 -->
		<id column="user_cid" property="cid" />
		<result column="name" property="name" />
		<result column="sex" property="sex" />
		<result column="cardDate" property="cardDate" />
		<!--订单信息 一个用户对应多个订单，使用collection -->
		<collection property="ordersList"
			ofType="com.pl.ssm.pojo.Orders">
			<id column="id" property="id" />
			<result column="user_cid" property="userCid" />
			<result column="number" property="number" />
			<result column="createtime" property="createtime" />
			<result column="note" property="note" />
			<!--一个订单包括多个明细 -->
			<collection property="ordersDetails"
				ofType="com.pl.ssm.pojo.OrdersDetail">
				<id column="orderdetail_id" property="id" />
				<result column="items_id" property="itemsId" />
				<result column="items_num" property="itemsNum" />
				<result column="orders_id" property="ordersId" />
				<!-- 一个订单明细对应一个商品 -->
				<association property="items"
					javaType="com.pl.ssm.pojo.Items">
					<id column="items_id" property="id" />
					<result column="items_name" property="name" />
					<result column="items_detail" property="detail" />
					<result column="itesm_price" property="price" />
				</association>
			</collection>
		</collection>
	</resultMap>
	<!-- 查询订单关联查询用户 -->
	<select id="findOrdersUser"
		resultType="com.pl.ssm.pojo.OrdersCustom">
		SELECT
		orders.*, carddb.name, carddb.sex, carddb.cardDate
		FROM
		orders,
		carddb
		WHERE
		orders.user_cid = carddb.cid;
	</select>

	<!-- 查询订单关联查询用户,使用resultMap -->
	<select id="findOrdersUserResultMap"
		resultMap="OrdersUserResultMap">
		SELECT
		orders.*, carddb.name, carddb.sex, carddb.cardDate
		FROM
		orders,
		carddb
		WHERE
		orders.user_cid = carddb.cid;
	</select>

	<!-- 查询订单关联查询用户及订单明细,使用resultMap -->
	<select id="findOrdersAndOrdersDetailResultMap"
		resultMap="OrdersAndOrdersDetailResultMap">
		SELECT
		orders.*, carddb.name, carddb.sex,
		carddb.cardDate,orderdetail.orders_id,orderdetail.items_id,orderdetail.items_num,orderdetail.id
		orderdetail_id
		FROM
		orders,
		carddb,
		orderdetail
		WHERE
		orders.user_cid =
		carddb.cid and orders.id=orderdetail.orders_id;
	</select>

	<!-- 查询用户及订单信息,使用resultMap -->
	<select id="findUserAndItemsResultMap"
		resultMap="UserAndItemsResultMap">
		SELECT
		orders.*, carddb.name, carddb.sex,
		carddb.cardDate,orderdetail.orders_id,orderdetail.items_id,orderdetail.items_num,orderdetail.id
		orderdetail_id,items.name items_name,items.price
		itesm_price,items.detail items_detail
		FROM
		orders,
		carddb,
		orderdetail,
		items
		WHERE
		orders.user_cid = carddb.cid and
		orders.id=orderdetail.orders_id and
		orderdetail.items_id=items.id;
	</select>

	<!--延迟加载的resultMap -->
	<resultMap type="com.pl.ssm.pojo.Orders"
		id="OrdersUserlazyLoadingResultMap">
		<!-- 对订单信息进行映射配置 -->
		<id column="id" property="id" />
		<result column="user_cid" property="userCid" />
		<result column="number" property="number" />
		<result column="createtime" property="createtime" />
		<result column="note" property="note" />
		<!-- 实现用户信息的延时加载 select:指定延时加载需要执行的statement的id（根据user_id查询用户信息的statement） 
			column：订单信息中关联用户信息查询的列，是user_id -->
		<association property="user"
			javaType="com.pl.ssm.pojo.User"
			select="com.pl.ssm.mapper.UserMapper.findUserById" column="user_cid">
		</association>
		<!--对用户信息延时加载 -->
	</resultMap>
	<!-- 查询订单关联查询用户,用户信息需要岩石加载 -->
	<select id="findOrdersUserlazyLoading"
		resultMap="OrdersUserlazyLoadingResultMap">
		select * from orders
	</select>
</mapper>